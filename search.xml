<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Visual Studio Code 使用指南</title>
      <link href="/blog/2020/01/24/Visual%20Studio%20Code%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2020/01/24/Visual%20Studio%20Code%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><strong>下载地址</strong><br><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="中文汉化"><a href="#中文汉化" class="headerlink" title="中文汉化"></a>中文汉化</h3><ol><li>点击左侧的 扩展</li><li>搜索 Chinese ，点击 Install</li></ol><h3 id="主题色配置"><a href="#主题色配置" class="headerlink" title="主题色配置"></a>主题色配置</h3><p>文件 - 首选项 - 颜色主题</p><h3 id="菜单栏文件的缩进"><a href="#菜单栏文件的缩进" class="headerlink" title="菜单栏文件的缩进"></a>菜单栏文件的缩进</h3><p>文件 - 首选项 - 设置 - 搜索 Tree:Indent 修改树缩进即可</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>快捷键 Ctrl + Shift + X</p><a id="more"></a><h3 id="Markdown-侧边预览"><a href="#Markdown-侧边预览" class="headerlink" title="Markdown 侧边预览"></a>Markdown 侧边预览</h3><ul><li>Ctrl + Shift + P<br>输入==Markdown==</li><li>先按Ctrl + K，然后放掉，紧接着再按 v</li></ul><h3 id="自定义代码片段（强推）"><a href="#自定义代码片段（强推）" class="headerlink" title="自定义代码片段（强推）"></a>自定义代码片段（强推）</h3><p>文件 - 首选项 - 用户代码片段</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h3><blockquote><p>自动闭合HTML标签</p></blockquote><h3 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h3><blockquote><p>自动同步修改标签 </p></blockquote><h3 id="Path-Autocomplete"><a href="#Path-Autocomplete" class="headerlink" title="Path Autocomplete"></a>Path Autocomplete</h3><blockquote><p>路径自动补全</p></blockquote><h3 id="eslint-集成ESLint检查"><a href="#eslint-集成ESLint检查" class="headerlink" title="eslint 集成ESLint检查"></a>eslint 集成ESLint检查</h3><blockquote><p>代码审查</p></blockquote><h3 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h3><blockquote><p>代码格式规范</p></blockquote><h3 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h3><blockquote><p>高亮 .vue 文件</p></blockquote><p>在编辑器中集成 ESLint<br>检查，可以在开发过程中就发现错误，甚至可以在保存时自动修复错误，极大的增加了开发效率。</p><p>要在 VSCode 中集成 ESLint 检查，我们需要先安装 ESLint 插件，点击「扩展」按钮，搜索 ESLint，然后安装即可。</p><p>VSCode 中的 ESLint 插件默认是不会检查 .ts 后缀的，需要在「文件 =&gt; 首选项 =&gt; 设置 =&gt; 工作区」中（也可以在项目更目录下创建一个配置文件 .vscode/settings.json），添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;eslint.validate&quot;: [</span><br><span class="line">        &quot;javascript&quot;,</span><br><span class="line">        &quot;javascriptreact&quot;,</span><br><span class="line">        &quot;typescript&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;typescript.tsdk&quot;: &quot;node_modules&#x2F;typescript&#x2F;lib&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h3><p><a href="https://blog.csdn.net/sunny327/article/details/81866785" target="_blank" rel="noopener">https://blog.csdn.net/sunny327/article/details/81866785</a></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="typescript使用alias-vscode提示找不到模块"><a href="#typescript使用alias-vscode提示找不到模块" class="headerlink" title="typescript使用alias vscode提示找不到模块"></a>typescript使用alias vscode提示找不到模块</h3><blockquote><p>在项目中使用alias功能，直接给了一个警告，虽然程序是可以正常运行的，但是无法通过点击跳转到文件</p></blockquote><p>为了解决这个问题，需要借助tsconfig，尽管webpack已经配置好了alias， 可是ts并不认账。</p><p>webpack配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">        &#39;@components&#39;: path.resolve(__dirname, &#39;src&#x2F;components&#x2F;&#39;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tsconfig.json 配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;paths&quot;: &#123;</span><br><span class="line">            &quot;@components&#x2F;*&quot;: [&quot;src&#x2F;components&#x2F;*&quot;],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不行可能需要重启vscode</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less</title>
      <link href="/blog/2020/01/23/less/"/>
      <url>/blog/2020/01/23/less/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展</p></blockquote><h3 id="docs"><a href="#docs" class="headerlink" title="docs"></a>docs</h3><p><a href="http://lesscss.cn/" target="_blank" rel="noopener">http://lesscss.cn/</a></p><h3 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h3><h4 id="import-keyword-“filename”"><a href="#import-keyword-“filename”" class="headerlink" title="@import (keyword) “filename”"></a>@import (keyword) “filename”</h4><p>为了在将Less文件编译生成CSS文件时，提高对外部文件的操作灵活性，还为@import指令提供了一些配置项。语法为：</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>reference</td><td>使用文件，但不会输出其内容（即，文件作为样式库使用）</td></tr><tr><td>inline</td><td>对文件的内容不作任何处理，直接输出</td></tr><tr><td>less</td><td>无论文件的扩展名是什么，都将作为LESS文件被输出</td></tr><tr><td>css</td><td>无论文件的扩展名是什么，都将作为CSS文件被输出</td></tr><tr><td>once</td><td>文件仅被导入一次 （这也是默认行为）</td></tr><tr><td>multiple</td><td>文件可以被导入多次</td></tr><tr><td>optional</td><td>当文件不存在时，继续编译（即，该文件是可选的）</td></tr></tbody></table><p>@import指令可以使用一个或多个配置项，当使用多个配置项时，各配置项之间用逗号隔开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import (optional, reference) &quot;foo.less&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 babel-plugin-import 实现按需加载</title>
      <link href="/blog/2020/01/23/babel-plugin-import%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/01/23/babel-plugin-import%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.npmjs.com/package/babel-plugin-import" target="_blank" rel="noopener">https://www.npmjs.com/package/babel-plugin-import</a></p><p><a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener">https://github.com/ant-design/babel-plugin-import</a></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>{ “libraryName”: “antd” }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button &#125; from &#39;antd&#39;;</span><br><span class="line">ReactDOM.render(&lt;Button&gt;xxxx&lt;&#x2F;Button&gt;);</span><br><span class="line"></span><br><span class="line">      ↓ ↓ ↓ ↓ ↓ ↓</span><br><span class="line"></span><br><span class="line">var _button &#x3D; require(&#39;antd&#x2F;lib&#x2F;button&#39;);</span><br><span class="line">ReactDOM.render(&lt;_button&gt;xxxx&lt;&#x2F;_button&gt;);</span><br></pre></td></tr></table></figure><p>{ “libraryName”: “antd”, style: “css” }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button &#125; from &#39;antd&#39;;</span><br><span class="line">ReactDOM.render(&lt;Button&gt;xxxx&lt;&#x2F;Button&gt;);</span><br><span class="line"></span><br><span class="line">      ↓ ↓ ↓ ↓ ↓ ↓</span><br><span class="line"></span><br><span class="line">var _button &#x3D; require(&#39;antd&#x2F;lib&#x2F;button&#39;);</span><br><span class="line">require(&#39;antd&#x2F;lib&#x2F;button&#x2F;style&#x2F;css&#39;);</span><br><span class="line">ReactDOM.render(&lt;_button&gt;xxxx&lt;&#x2F;_button&gt;);</span><br></pre></td></tr></table></figure><p>{ “libraryName”: “antd”, style: true }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button &#125; from &#39;antd&#39;;</span><br><span class="line">ReactDOM.render(&lt;Button&gt;xxxx&lt;&#x2F;Button&gt;);</span><br><span class="line"></span><br><span class="line">      ↓ ↓ ↓ ↓ ↓ ↓</span><br><span class="line"></span><br><span class="line">var _button &#x3D; require(&#39;antd&#x2F;lib&#x2F;button&#39;);</span><br><span class="line">require(&#39;antd&#x2F;lib&#x2F;button&#x2F;style&#39;);</span><br><span class="line">ReactDOM.render(&lt;_button&gt;xxxx&lt;&#x2F;_button&gt;);</span><br></pre></td></tr></table></figure><p>备注 : 配置 style: true 则在项目编译阶段，可以对引入的 antd 样式文件进行编译，从而可以压缩打包尺寸；而配置style: “css”, 则直接引入经过打包后的 antd 样式文件</p><a id="more"></a><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import --save-dev</span><br></pre></td></tr></table></figure><p>通过 .babelrc 配置文件或者 babel-loader 模块编程引入.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [[&quot;import&quot;, options]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><p>options can be object.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;libraryName&quot;: &quot;antd&quot;,</span><br><span class="line">  &quot;style&quot;: true,   &#x2F;&#x2F; or &#39;css&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;libraryName&quot;: &quot;lodash&quot;,</span><br><span class="line">  &quot;libraryDirectory&quot;: &quot;&quot;, &#x2F;&#x2F;表示从库的package.json的main入口；否则默认为lib文件夹</span><br><span class="line">  &quot;camel2DashComponentName&quot;: false,  &#x2F;&#x2F; default: true，将引入的组件名转化为&quot;-&quot;连接的文件名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> babel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 按需加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glob</title>
      <link href="/blog/2020/01/23/node-glob/"/>
      <url>/blog/2020/01/23/node-glob/</url>
      
        <content type="html"><![CDATA[<p>摘自<a href="https://github.com/isLishude/blog/issues/63" target="_blank" rel="noopener">https://github.com/isLishude/blog/issues/63</a></p><p><a href="https://github.com/isaacs/node-glob#readme" target="_blank" rel="noopener">本文</a> 由 <a href="http://yanxyz.net/" target="_blank" rel="noopener">Ivan Yan</a> 翻译，<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">“署名-非商用-相同方式共享”</a>，意见<a href="https://github.com/hongfanqie/node-glob/issues" target="_blank" rel="noopener">反馈</a>。</p><p>通过星号等 shell 所用的模式匹配文件。</p><p>这是一个 JavaScript 版本的 glob 实现。使用 <a href="https://github.com/isaacs/minimatch" target="_blank" rel="noopener">minimatch</a> 执行匹配操作。</p><p>译注：早期 Unix （第 1-6 版，1969-1975）的命令行解释器依赖独立程序 <em>/etc/glob</em> 展开参数中的通配符。这个程序会展开通配符并把展开后的文件列表传给命令。它的名字是 “global command” 的简称。后来这个功能由工具函数 glob() 提供，被 shell 等程序使用。（译自 <a href="https://en.wikipedia.org/wiki/Glob_%28programming%29#Origin" target="_blank" rel="noopener">WikiPedia</a>。）</p><a id="more"></a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>用 npm 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i glob</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">"glob"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// options 可选</span></span><br><span class="line">glob(<span class="string">"**/*.js"</span>, options, <span class="function"><span class="keyword">function</span> (<span class="params">er, files</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// files 是一个文件名数组。</span></span><br><span class="line">  <span class="comment">// 如果设置了选项 `nonull` 并且没有找到匹配，则 files 是 ["**/*.js"]</span></span><br><span class="line">  <span class="comment">// er 是一个错误对象或 null。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Glob-基础"><a href="#Glob-基础" class="headerlink" title="Glob 基础"></a>Glob 基础</h2><p>“Globs” 是像这样的模式：用在命令行中的 <code>ls *.js</code>, 用在 <code>.gitignore</code> 文件中的 <code>build/*</code>。</p><p>在解析路径中的模式前，先展开大括号部分。大括号部分以 <code>{</code> 开始，以 <code>}</code> 结束，里面是一个逗号分隔列表。大括号部分可以包含斜杠，例如 <code>a{/b/c,bcd}</code> 将展开为 <code>a/b/c</code> 与 <code>abcd</code>。</p><p>译注：比如路径 “/foo/bar”, 其中 “foo” 与 “bar” 是路径片段(path portion)。</p><p>下面这些字符在路径片段中有特别的意义：</p><ul><li><code>*</code> 匹配路径片段中零个或多个字符。</li><li><code>?</code> 匹配一个字符。</li><li><code>[...]</code> 匹配一个字符集合，类似于正则表达式的字符集合。如果第一个字符是 <code>!</code> 或 <code>^</code> 那么它匹配一个不在这个字符集合内的字符。</li><li><code>!(pattern|pattern|pattern)</code> 匹配不匹配模式的文件。</li><li><code>?(pattern|pattern|pattern)</code> 匹配这些模式零次或一次。</li><li><code>+(pattern|pattern|pattern)</code> 匹配这些模式一次或多次。</li><li><code>*(a|b|c)</code> 匹配这些模式零次或多次。</li><li><code>@(pattern|pat*|pat?erN)</code> 匹配这些模式一次。</li><li><code>**</code> 即 globstar 模式，如果这是单独的一个路径片断，则匹配零级或多级目录，但不会搜索符号链接目录。</li></ul><h3 id="点号"><a href="#点号" class="headerlink" title="点号"></a>点号</h3><p>如果文件或目录路径片段的第一个字符是点号（<code>.</code>），那么它将不匹配任何 glob，除非 glob 相应的路径片段的第一个字符也是 <code>.</code>。</p><p>例如，<code>a/.*/c</code> 匹配 <code>a/.b/c</code>，但是 <code>a/*/c</code> 不匹配，因为 <code>*</code> 第一个字符不是 <code>.</code>。</p><p>可以设置选项 <code>dot:true</code>，将 <code>.</code> 当作普通的字符。</p><p>译注：点文件（dot file），名字以 <code>.</code> 开始，在 Unix 下是隐藏文件。即使使用 globstar 模式，<code>a/**/c</code> 也不会匹配 <code>a/.b/c</code>。</p><h3 id="匹配基本名"><a href="#匹配基本名" class="headerlink" title="匹配基本名"></a>匹配基本名</h3><p>如果设置选项 <code>matchBase:true</code>，并且模式不包含斜杠，那么将搜索目录树下任意地方的匹配基本名（basename）的文件。例如 <code>*.js</code> 匹配 <code>test/simple/basic.js</code>。</p><h3 id="空集"><a href="#空集" class="headerlink" title="空集"></a>空集</h3><p>如果没有找到匹配的文件，那么返回一个空的数组。这跟 shell 不同，shell 会返回模式。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> a*s*d*f</span></span><br><span class="line">a*s*d*f</span><br></pre></td></tr></table></figure><p>想与 shell 一致，设置选项 <code>nonull:true</code>。</p><h3 id="其它参考"><a href="#其它参考" class="headerlink" title="其它参考"></a>其它参考</h3><ul><li><code>man sh</code></li><li><code>man bash</code> (搜索 “Pattern Matching”)</li><li><code>man 3 fnmatch</code></li><li><code>man 5 gitignore</code></li><li><a href="https://github.com/isaacs/minimatch" target="_blank" rel="noopener">minimatch 文档</a></li></ul><h2 id="glob-hasMagic-pattern-options"><a href="#glob-hasMagic-pattern-options" class="headerlink" title="glob.hasMagic(pattern, [options])"></a>glob.hasMagic(pattern, [options])</h2><p>如果模式包含特殊的字符则返回 <code>true</code>，否则返回 <code>false</code>。</p><p>注意选项会影响结果。如果设置了选项 <code>noext:true</code>，则 <code>+(a|b)</code> 不会视为魔法模式。如果模式包含大括号展开式，比如 <code>a/{b/c,x/y}</code>，则认为是魔法的，除非设置了选项 <code>nobrace:true</code>。</p><h2 id="glob-pattern-options-cb"><a href="#glob-pattern-options-cb" class="headerlink" title="glob(pattern, [options], cb)"></a>glob(pattern, [options], cb)</h2><ul><li><p><code>pattern</code> <code>{String}</code> 待匹配的模式</p></li><li><p><code>options</code> <code>{Object}</code></p></li><li><p><code>cb</code> <code>{Function}</code></p><ul><li><code>err</code> <code>{Error | null}</code></li><li><code>matches</code> <code>{Array&lt;String&gt;}</code> 匹配模式的文件名</li></ul></li></ul><p>进行一个异步的 glob 搜索。</p><h2 id="glob-sync-pattern-options"><a href="#glob-sync-pattern-options" class="headerlink" title="glob.sync(pattern, [options])"></a>glob.sync(pattern, [options])</h2><ul><li><code>pattern</code> <code>{String}</code> 待匹配的模式</li><li><code>options</code> <code>{Object}</code></li><li>return: <code>{Array&lt;String&gt;}</code> 匹配模式的文件名</li></ul><p>进行一个同步的 glob 搜索。</p><h2 id="Class-glob-Glob"><a href="#Class-glob-Glob" class="headerlink" title="Class: glob.Glob"></a>Class: glob.Glob</h2><p>实例化 <code>glob.Glob</code> 类，创建一个 Glob 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Glob = <span class="built_in">require</span>(<span class="string">"glob"</span>).Glob</span><br><span class="line"><span class="keyword">var</span> mg = <span class="keyword">new</span> Glob(pattern, options, cb)</span><br></pre></td></tr></table></figure><p>这是一个 EventEmitter 对象，立刻开始遍历文件系统搜索匹配。</p><h3 id="new-glob-Glob-pattern-options-cb"><a href="#new-glob-Glob-pattern-options-cb" class="headerlink" title="new glob.Glob(pattern, [options], [cb])"></a>new glob.Glob(pattern, [options], [cb])</h3><ul><li><p><code>pattern</code> <code>{String}</code> 待匹配的模式</p></li><li><p><code>options</code> <code>{Object}</code></p></li><li><p><code>cb</code> <code>{Function}</code> 当遇到错误或找到匹配时调用</p><ul><li><code>err</code> <code>{Error | null}</code></li><li><code>matches</code> <code>{Array&lt;String&gt;}</code> 匹配模式的文件名</li></ul></li></ul><p>注意，如果设置了选项 <code>sync</code>，则匹配将立即添加到 <code>g.found</code>。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><p><code>minimatch</code> glob 所用的 minimatch 对象。</p></li><li><p><code>options</code> 传入的选项。</p></li><li><p><code>aborted</code> 布尔值，当调用 <code>abort()</code> 时设为 true。取消之后不能继续 glob 搜索，不过可以通过重用 statCache 避免重复调用 syscall。</p></li><li><p><code>cache</code> 缓存。每个字段都可以取下面的值：</p><ul><li><code>false</code> - 路径不存在</li><li><code>true</code> - 路径存在</li><li><code>&#39;FILE&#39;</code> - 路径存在，并且不是目录</li><li><code>&#39;DIR&#39;</code> - 路径存在，并且是目录</li><li><code>[file, entries, ...]</code> - 路径存在, 并且是目录，数组值是 <code>fs.readdir</code> 的结果</li></ul></li><li><p><code>statCache</code> 缓存 <code>fs.stat</code> 的结果，阻止多次读取同一路径的信息。</p></li><li><p><code>symlinks</code> 记录哪些路径是符号链接，与 <code>**</code> 解析相关。</p></li><li><p><code>realpathCache</code> 可选对象，传给 <code>fs.realpath</code>，以减少不必要的 syscall。它保存在 Glob 实例上，可以重用。</p></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><code>end</code> 当结束搜索匹配时触发此事件，包含所有的匹配。如果设置了选项 <code>nonull</code>，并且没有找到匹配，则 <code>matches</code> 包含原来的模式。匹配经过排序，除非设置了选项 <code>nosort</code>。</li><li><code>match</code> 每当找到一个匹配时以这个匹配触发此事件，匹配没有去重，也没有解析为真实路径。</li><li><code>error</code> 当遇到一个异常时, 或者在设置了 <code>options.strict</code> 的情况下遇到 fs 错误时触发此事件。</li><li><code>abort</code> 当调用 <code>abort()</code> 时触发此事件。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>pause</code> 暂停搜索。</li><li><code>resume</code> 继续搜索。</li><li><code>abort</code> 取消搜索。</li></ul><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>所有可以传给 Minimatch 的选项也可以传给 Glob，选项会改变匹配行为。有些选项是新加的，有些选项是 glob 特定选项。</p><p>所有选项默认是 false, 除非特别说明。</p><p>所有选项也会添加给 Glob 对象。</p><p>如果运行多个 <code>glob</code> 操作，可以将一个 Glob 对象作为 <code>options</code> 参数传递给后面的操作，以简化一些 <code>stat</code> 和 <code>readdir</code> 的调用。在最新的版本里，你可以传入共享的 <code>symlinks</code>, <code>statCache</code>, <code>realpathCache</code>, <code>cache</code> 选项，这样并行的 glob 操作将因为共享文件系统的信息而提速。</p><ul><li><code>cwd</code> String，搜索的工作目录，默认为 <code>process.cwd()</code>。</li><li><code>root</code> String，以 <code>/</code> 开始的模式的挂载目录，默认为 <code>path.resolve(options.cwd, &quot;/&quot;)</code> (Unix 系统下为 <code>/</code>，Windows 系统下为 <code>C:\</code> 或其它磁盘根目录。)</li><li><code>dot</code> 在常规匹配与 <code>globstar</code> 匹配中包含点文件。注意，<code>.</code> 在模式片断中始终匹配点文件。</li><li><code>nomount</code> 以 <code>/</code> 开始的模式默认挂载到 root 选项设置的目录上，因而返回一个合法的文件系统路径。设置此选项禁止此行为。</li><li><code>mark</code> 给匹配的目录添加一个 <code>/</code> 字符。注意这会调用 <code>stat</code>。</li><li><code>nosort</code> 不排序结果。</li><li><code>stat</code> stat 所有的结果。这多少会降低性能，完全没必要，除非认为 <code>readdir</code> 不能作为文件存在的可靠指示。</li><li><code>silent</code> 当读取目录时遇到一个不常见的错误，将打印一条警告到 stderr。设置此选项可取消打印。</li><li><code>strict</code> 当读取目录时遇到一个不常见的错误，进程将继续搜索其它匹配。设置此选项可抛出错误。</li><li><code>cache</code> Object, 见上文。传入之前生成的缓存对象可以节省一些 fs 调用。</li><li><code>statCache</code> Object, 匹配结果的文件系统信息的缓存，用来阻止不必要的 <code>stat</code> 调用。通常不需要设置此选项。不过如果知道文件系统在不同的 glob() 调用之间不会变化，可以将一个 glob() 调用的 statCache 传给另一个调用的选项（见下面“竞态条件”）。</li><li><code>symlinks</code> Object, 已知的符号链接的缓存。可以传入一个之前生成的 <code>symlinks</code> 对象，在匹配 <code>**</code> 时节省 <code>lstat</code> 调用。</li><li><code>sync</code> 废弃，可以用 <code>glob.sync(pattern, opts)</code>。</li><li><code>nounique</code> 在有些情况下，大括号展开式会导致在结果里面同一文件出现多次。本实现默认阻止结果里面出现重复。此选项禁止此行为。</li><li><code>nonull</code> 不返回空集，返回一个包含模式的集合，这是 glob(3) 的默认行为。</li><li><code>debug</code> 启用 minimatch 和 glob 调试。</li><li><code>nobrace</code> 不展开 <code>{a,b}</code> 和 <code>{1..3}</code> 这样的集合。</li><li><code>noglobstar</code> 不支持 “globstar” 模式，这时 <code>**</code> 不匹配多级文件名，像普通的 <code>*</code> 一样对待。</li><li><code>noext</code> 不支持 “extglob” 模式，比如 <code>+(a|b)</code>。</li><li><code>nocase</code> 匹配不区分大小写。注意：在不区分大小写的系统里，默认匹配没有特殊字符的模式，因为 <code>stat</code> 和 <code>readdir</code> 不会抛出异常。</li><li><code>matchBase</code> 如果模式不包含斜杠则匹配基名字。例如 <code>*.js</code> 将视为 <code>**/*.js</code>，匹配所有目录下的 js 文件。</li><li><code>nodir</code> 不匹配目录，只匹配文件。注意如果只匹配目录，简单地在模式的末尾放一个 <code>/</code> 即可。</li><li><code>ignore</code> 添加一个模式或一个 glob 模式数组，用来排除匹配。注意：<code>ignore</code> 模式<strong>始终</strong>认为 <code>dot:true</code>，不管其它的配置是怎样的。</li><li><code>follow</code> 在展开 <code>**</code> 时追踪符号链接目录。注意这可能导致大量重复的引用（循环链接）。</li><li><code>realpath</code> 在所有的结果上调用 <code>fs.realpath</code>，在不能解析符号链接的情况下，返回匹配文件的全路径，不过它常常是一个损坏的符号链接。</li><li><code>absolute</code> 设为 true 时始终得到匹配文件的绝对地址。不同于 <code>realpath</code>，这同时影响 <code>match</code> 事件的返回值。</li></ul><h2 id="与其它-fnmatch-glob-实现的比较"><a href="#与其它-fnmatch-glob-实现的比较" class="headerlink" title="与其它 fnmatch/glob 实现的比较"></a>与其它 fnmatch/glob 实现的比较</h2><p>严格地兼容现实规范是值得追求的目标，不过 node-glob 与其它实现之间存在差异，并且是有意的。</p><p>默认支持 <code>**</code>，除非设置了选项 <code>noglobstar</code>。这也是 bsdglob 和 bash 4.3 的方式。只有当 <code>**</code> 是单独的一个路径片段时它才有这种特殊意义。例如 <code>a/**/b</code> 匹配 <code>a/x/y/b</code>，但是 <code>a/**b</code> 不会。</p><p>注意，<code>**</code> 不会搜索符号链接目录，尽管它们可能匹配模式的其它片断。这可以防止无限循环、重复等。</p><p>如果转义的模式没有找到匹配，并且设置了选项 <code>nonull</code>，则 glob 原样返回模式，而不是转义后的模式。例如 <code>glob.match([], &quot;\\*a\\?&quot;)</code> 返回 <code>&quot;\\*a\\?&quot;</code> 而不是 <code>&quot;*a?&quot;</code>。默认的行为类似于在 bash 里设置 <code>nullglob</code> 选项，除了 bash 不会解析转义的模式。</p><p>如果没有禁止展开大括号，则在解析 glob 的其它模式之前先展开它。例如 <code>+(a|{b),c)}</code>，在 bash 或 zsh 下面是无效的，在这儿会先展开为 <code>+(a|b)</code> 和 <code>+(a|c)</code>，再检查这两个模式的有效性。既然它们是有效的，则进行匹配。</p><h3 id="注释与排除"><a href="#注释与排除" class="headerlink" title="注释与排除"></a>注释与排除</h3><p>在之前的版本中，如果模式以 <code>#</code> 开始则它是一个注释。标记为注释。如果模式以 <code>!</code> 开始则它是一个排除模式。</p><p>v5 已经废弃了选项 <code>nonegate</code> 和 <code>nocomment</code>。v6 则删除了这两个选项。</p><p>如果想排除某些文件，可以使用选项 <code>ignore</code> 。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><strong>请在 glob 表达式里只使用斜杠。</strong></p><p>译注：斜杠（forward-slashe “/“）是顺时针方向，反斜杠（backward-slashe “”）是逆时针方向。</p><p>尽管 Windows 可以用 <code>/</code> 或 <code>\</code> 作为路径分隔符，但是本实现只使用 <code>/</code>。在 glob 表达式里必须只使用斜杠。反斜杠始终视为转义符，而不是路径分隔符。</p><p>绝对路径模式比如 <code>/foo/*</code>，匹配结果挂载到选项 root 设置的目录上（使用 <code>path.join()</code>）。 在 Windows 下，在默认的情况下，<code>/foo/*</code> 可以匹配到 <code>C:\foo\bar.txt</code>（译注：此时 cwd 在 C 盘下）。</p><h2 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h2><p>Glob 搜索本质上容易受竞态条件（race conditions）的影响，因为它建立在目录遍历等上面。</p><p>因此，当 glob 搜索某个文件时它是存在的，然后在返回结果时它可能被删除或被修改。</p><p>作为内部实现的一部分，为了降低系统开销，此实现缓存了所有的 stat 和 readdir 的结果。但是，这也导致它更加容易受竞态条件的影响，特别是在多个 glob 调用之间重用 cache 或 statCache 对象时。</p><p>在面对快速的变化时，建议用户不要将 glob 结果作为文件系统状态的担保。对于绝大多数的操作，这绝不会是一个问题。</p><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>对程序行为的任何改变（包含补丁）必须同时提交测试。</p><p>测试失败的或降低性能的补丁将被拒绝。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># to run tests</span><br><span class="line">npm test</span><br><span class="line"></span><br><span class="line"># to re-generate test fixtures</span><br><span class="line">npm run test-regen</span><br><span class="line"></span><br><span class="line"># to benchmark against bash&#x2F;zsh</span><br><span class="line">npm run bench</span><br><span class="line"></span><br><span class="line"># to profile javascript</span><br><span class="line">npm run prof</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> glob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docz写ReactUI文档</title>
      <link href="/blog/2019/12/03/%E4%BD%BF%E7%94%A8docz%E5%86%99ReactUI%E6%96%87%E6%A1%A3/"/>
      <url>/blog/2019/12/03/%E4%BD%BF%E7%94%A8docz%E5%86%99ReactUI%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用简单，目前只支持 React</p></blockquote><ul><li><a href="https://www.docz.site/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/doczjs/docz" target="_blank" rel="noopener">Github</a></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add docz</span><br></pre></td></tr></table></figure><ol start="2"><li>在你项目中的任何位置新增 <code>.mdx</code> 文件<a id="more"></a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: Button</span><br><span class="line">route: &#x2F;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">import &#123; Playground, Props &#125; from &#39;docz&#39;</span><br><span class="line">import Button from &#39;.&#x2F;Button&#39;</span><br><span class="line"></span><br><span class="line"># Button</span><br><span class="line"></span><br><span class="line">&lt;Props of&#x3D;&#123;Button&#125; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">## Basic usage</span><br><span class="line"></span><br><span class="line">&lt;Playground&gt;</span><br><span class="line">  &lt;Button type&#x3D;&quot;submit&quot;&gt;Click me&lt;&#x2F;Button&gt;</span><br><span class="line">  &lt;Button&gt;No, click me&lt;&#x2F;Button&gt;</span><br><span class="line">&lt;&#x2F;Playground&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>And a Button component Button.jsx:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;</span><br><span class="line">import t from &#39;prop-types&#39;</span><br><span class="line"></span><br><span class="line">const Button &#x3D; (&#123; children, type &#125;) &#x3D;&gt; &lt;button type&#x3D;&#123;type&#125;&gt;&#123;children&#125;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">Button.propTypes &#x3D; &#123;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * This is a description for this prop.</span><br><span class="line">   * Button type.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  type: t.oneOf([&#39;button&#39;, &#39;submit&#39;, &#39;reset&#39;]),</span><br><span class="line">&#125;</span><br><span class="line">Button.defaultProps &#x3D; &#123;</span><br><span class="line">  type: &#39;button&#39;,</span><br><span class="line">&#125;</span><br><span class="line">export default Button</span><br></pre></td></tr></table></figure><ol start="4"><li>运行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn docz dev</span><br></pre></td></tr></table></figure><p>This will start a local development server and open your documentation site in the browser.</p><h2 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h2><p>项目下新建 <code>doczrc.js</code>，更多配置项参考：<a href="https://www.docz.site/docs/project-configuration" target="_blank" rel="noopener">https://www.docz.site/docs/project-configuration</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    typescript: true,</span><br><span class="line">    title: &#39;docz&#39;,</span><br><span class="line">    ignore: [&#39;README.md&#39;, &#39;CHANGELOG.md&#39;],</span><br><span class="line">    port: &#39;3000&#39;,</span><br><span class="line">    dest: &#39;.&#x2F;docs&#39;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h3><p>This option is used if you need to import Typescript components inside your .mdx files.</p><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>启动服务端口</p><h3 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h3><p>Option used to ignore files to be parsed by docz.</p><h3 id="dest"><a href="#dest" class="headerlink" title="dest"></a>dest</h3><p>设置打包路径，默认值<code>.docz/dist</code></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Using-Docz-parsing-CSS-with-LESS"><a href="#Using-Docz-parsing-CSS-with-LESS" class="headerlink" title="Using Docz parsing CSS with LESS"></a>Using Docz parsing CSS with LESS</h3><blockquote><p>参考 <a href="https://github.com/doczjs/docz/tree/master/examples/less" target="_blank" rel="noopener">https://github.com/doczjs/docz/tree/master/examples/less</a></p></blockquote><ol><li>安装 <code>gatsby-plugin-less</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install gatsby-plugin-less -D</span><br></pre></td></tr></table></figure><ol start="2"><li>根目录下新建 <code>gatsby-config.js</code>，并写入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  plugins: [&#39;gatsby-plugin-less&#39;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>执行 <code>yarn docz dev</code></li></ol><h3 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h3><p>在项目根目录下新建 <code>src</code> 文件夹.</p><p>在<code>docz</code>目录下新建<code>gatsby-theme-docz/wrapper.js</code>，<code>gatsby-theme-docz/global.css</code>.</p><p><strong>wrapper.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#39;.&#x2F;global.css&#39;;</span><br><span class="line"></span><br><span class="line">export default function Wrapper(props) &#123;</span><br><span class="line">    return &lt;div&gt;&#123;props.children&#125;&lt;&#x2F;div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>global.css</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Writing-a-function-or-Class-in-mdx"><a href="#Writing-a-function-or-Class-in-mdx" class="headerlink" title="Writing a function or Class in mdx"></a>Writing a function or Class in mdx</h3><p>参考：</p><p><a href="https://github.com/doczjs/docz/issues/918" target="_blank" rel="noopener">https://github.com/doczjs/docz/issues/918</a></p><p>Example with a React component</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;Playground&gt;</span><br><span class="line">  &#123;class Example extends React.Component &#123;</span><br><span class="line">    constructor (props) &#123;</span><br><span class="line">      super(props)</span><br><span class="line"></span><br><span class="line">      this.state &#x3D; &#123; show: false &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleClick () &#123;</span><br><span class="line">      this.setState(&#123; show: true &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;React.Fragment&gt;</span><br><span class="line">          &#123;this.state.show &amp;&amp;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;p&gt;</span><br><span class="line">                Lorem ipsum dolor sit amet, consetetur sadipscing elitr,</span><br><span class="line">                sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.</span><br><span class="line">                At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,</span><br><span class="line">                no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet,</span><br><span class="line">                consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,</span><br><span class="line">                sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,</span><br><span class="line">                no sea takimata sanctus est Lorem ipsum dolor sit amet.</span><br><span class="line">              &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &#125;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.handleClick()&#125;&gt;Show&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;React.Fragment&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&lt;&#x2F;Playground&gt;</span><br></pre></td></tr></table></figure><p>Example with a JS function</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Playground&gt;</span><br><span class="line">  &#123;() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;docz&#39;)</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&lt;&#x2F;Playground&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> doc </tag>
            
            <tag> 交互式文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于less提供的modifyVars实现主题切换</title>
      <link href="/blog/2019/11/12/%E5%9F%BA%E4%BA%8Eless%E6%8F%90%E4%BE%9B%E7%9A%84modifyVars%E5%AE%9E%E7%8E%B0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/"/>
      <url>/blog/2019/11/12/%E5%9F%BA%E4%BA%8Eless%E6%8F%90%E4%BE%9B%E7%9A%84modifyVars%E5%AE%9E%E7%8E%B0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/ElemeFE/element/issues/3054" target="_blank" rel="noopener">https://github.com/ElemeFE/element/issues/3054</a></p><p><a href="https://blog.csdn.net/weixin_30872671/article/details/98286899" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30872671/article/details/98286899</a> - 使用 css/less 动态更换主题色（换肤功能）</p><p><a href="https://www.cnblogs.com/starof/p/5226739.html" target="_blank" rel="noopener">https://www.cnblogs.com/starof/p/5226739.html</a> - less 简单入门</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>使用 less 提供的 modifyVars 的方式来实现。<br><a href="http://lesscss.org/usage/#using-less-in-the-browser-modify-variables" target="_blank" rel="noopener">http://lesscss.org/usage/#using-less-in-the-browser-modify-variables</a></p><p>modifyVars 方法是是基于 less 在浏览器中的编译来实现。所以在引入 less 文件的时候需要通过 link 方式引入，然后基于 less.js 中的方法来进行修改变量。</p><p><a href="https://github.com/yemuguliunian/notes/tree/master/practice/theme-preview" target="_blank" rel="noopener">代码实现</a></p><a id="more"></a><h3 id="index-html-引入主题色文件-和-less-js"><a href="#index-html-引入主题色文件-和-less-js" class="headerlink" title="index.html 引入主题色文件 和 less.js"></a>index.html 引入主题色文件 和 less.js</h3><p>less 样式文件一定要在引入 less.js 前先引入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; color.less</span><br><span class="line">@backgroud-color: #108ee9;</span><br><span class="line"></span><br><span class="line">.ant-btn &#123;</span><br><span class="line">    background-color: @backgroud-color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; index.html</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&#x2F;less&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;resources&#x2F;style&#x2F;color.less&quot; &#x2F;&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;less.js&#x2F;2.5.3&#x2F;less.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><h3 id="更改主题色事件"><a href="#更改主题色事件" class="headerlink" title="更改主题色事件"></a>更改主题色事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">less.modifyVars(&#123;</span><br><span class="line">    '@backgroud-color': #000</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过 less modifyVars 修改变量来达到换主题的效果。其本质上是样式覆盖。</p><p>less.js 会 把 color.less 浏览器编译成 行内样式 即 F12 查看 index.html 可发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./resources/style/color.less"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">id</span>=<span class="string">"less:resources-style-color"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.ant-btn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#108ee9</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.3/less.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用 modifyVars 后重新编译为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./resources/style/color.less"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">id</span>=<span class="string">"less:resources-style-color"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.ant-btn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.3/less.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本质上是对页面 <code>ant-btn</code> 类属性 <code>background-color</code> 一个覆盖操作。</p><p><strong><code>index.html</code> 行内样式中的 <code>ant-btn</code> 类属性 <code>background-color</code> 覆盖页面中的 <code>ant-btn</code> 类属性 <code>background-color</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; demo.html</span><br><span class="line">&lt;button class&#x3D;&quot;ant-btn&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; demo.css</span><br><span class="line">.ant-btn &#123;</span><br><span class="line">    background-color: #108ee9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：执行 modifyVars 时， color.less 文件本身没有任何变更，编译时传入修改变量所对应的值</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
            <tag> 主题切换 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
